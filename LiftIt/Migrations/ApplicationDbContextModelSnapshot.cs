// <auto-generated />
using LiftIt.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace LiftIt.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LiftIt.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("LiftIt.Models.Cwiczenia", b =>
                {
                    b.Property<int>("CwiczeniaId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataPomiaru");

                    b.Property<int>("LiczbaSerii");

                    b.Property<string>("Nazaw");

                    b.Property<string>("StringDataPomiaru");

                    b.Property<string>("UserId");

                    b.HasKey("CwiczeniaId");

                    b.HasIndex("UserId");

                    b.ToTable("Cwiczenie");
                });

            modelBuilder.Entity("LiftIt.Models.Obwody", b =>
                {
                    b.Property<int>("ObwodyId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Biceps");

                    b.Property<double>("Biodra");

                    b.Property<DateTime>("DataPomiaru");

                    b.Property<double>("Kark");

                    b.Property<double>("Klatka");

                    b.Property<double>("Lydka");

                    b.Property<double>("Nadgarstek");

                    b.Property<double>("Przedramie");

                    b.Property<string>("StringDataPomiaru");

                    b.Property<double>("Talia");

                    b.Property<double>("Udo");

                    b.Property<string>("UserId");

                    b.HasKey("ObwodyId");

                    b.HasIndex("UserId");

                    b.ToTable("Obwody");
                });

            modelBuilder.Entity("LiftIt.Models.Seria", b =>
                {
                    b.Property<int>("SeriaId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Ciezar");

                    b.Property<int>("CwiczeniaId");

                    b.Property<int>("LiczbaPowtorzen");

                    b.HasKey("SeriaId");

                    b.HasIndex("CwiczeniaId");

                    b.ToTable("Seria");
                });

            modelBuilder.Entity("LiftIt.Models.Typ", b =>
                {
                    b.Property<int>("TypId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("NazwaPartiiCiala");

                    b.HasKey("TypId");

                    b.ToTable("Typ");
                });

            modelBuilder.Entity("LiftIt.Models.TypCwiczenie", b =>
                {
                    b.Property<int>("TypCwiczenieId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CwiczeniaId");

                    b.Property<int>("CwiczenieId");

                    b.Property<int>("TypId");

                    b.HasKey("TypCwiczenieId");

                    b.HasIndex("CwiczeniaId");

                    b.HasIndex("TypId");

                    b.ToTable("TypCwiczenie");
                });

            modelBuilder.Entity("LiftIt.Models.Waga", b =>
                {
                    b.Property<int>("WagaId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BMI");

                    b.Property<DateTime>("DataPomiaru");

                    b.Property<double>("Kosci");

                    b.Property<double>("Miesnie");

                    b.Property<string>("StringDataPomiaru");

                    b.Property<double>("Tluszcz");

                    b.Property<string>("UserId");

                    b.Property<double>("WagaCiala");

                    b.Property<double>("Woda");

                    b.HasKey("WagaId");

                    b.HasIndex("UserId");

                    b.ToTable("Waga");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LiftIt.Models.Cwiczenia", b =>
                {
                    b.HasOne("LiftIt.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("LiftIt.Models.Obwody", b =>
                {
                    b.HasOne("LiftIt.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("LiftIt.Models.Seria", b =>
                {
                    b.HasOne("LiftIt.Models.Cwiczenia", "Cwiczenia")
                        .WithMany()
                        .HasForeignKey("CwiczeniaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiftIt.Models.TypCwiczenie", b =>
                {
                    b.HasOne("LiftIt.Models.Cwiczenia", "Cwiczenia")
                        .WithMany()
                        .HasForeignKey("CwiczeniaId");

                    b.HasOne("LiftIt.Models.Typ", "Typ")
                        .WithMany()
                        .HasForeignKey("TypId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiftIt.Models.Waga", b =>
                {
                    b.HasOne("LiftIt.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LiftIt.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LiftIt.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LiftIt.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LiftIt.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
